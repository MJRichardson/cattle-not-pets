# create a new environment for each pull-request

name: environment-create

on:
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env: 
  - octopusUrl: "https://michrich.octopus.app/"
  - octopusSpace: "Dynamic Infra"

jobs:
  create-azure-infrastructure:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_HEAD_REF#refs/heads/})"
        id: extract_branch
      
      # login to azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Create resource group
        uses: azure/CLI@v1
        id: create-resource-group
        with:
          inlineScript: |
            RESOURCEGROUPNAME=michrich-cattle-not-pets-${{steps.extract_branch.outputs.branch}}
            LOCATION="Australia Southeast"
            if [ $(az group exists --name $RESOURCEGROUPNAME) = false ]; then
              az group create --name $RESOURCEGROUPNAME --location "$LOCATION"
            fi
            echo "##[set-output name=resourceGroup;]$(echo '$RESOURCEGROUPNAME')"
            
      - name: Replace parameters file
        uses: microsoft/variable-substitution@v1 
        with:
          files: './infra/azure-rg-params.json'
        env:
          parameters.branch.value: "${{steps.extract_branch.outputs.branch}}"

      - uses: azure/arm-deploy@v1
        with:
          resourceGroupName: michrich-cattle-not-pets-${{steps.extract_branch.outputs.branch}}
          template: ./infra/azure-rg.json
          parameters: ./infra/azure-rg-params.json
          
      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: 7.4.3140

      - name: Create Octopus environment
        id: create-environment
        env:
          branch: "${{steps.extract_branch.outputs.branch}}"
        run: |  
          octo list-environments --server=${{ env.octopusUrl }} --space="${{ env.octopusSpace }}" --apiKey=${{ secrets.OCTOPUS_API_KEY }}
          octo create-environment --name="${{ env.branch }}" --server=${{ env.octopusUrl }} --space="${{ env.octopusSpace }}" --apiKey=${{ secrets.OCTOPUS_API_KEY }}
          echo "##[set-output name=environment;]$(echo "${{ env.branch }}")"

      - name: Register infrastructure with Octopus 
        uses: Amadevus/pwsh-script@v2
        env:
          branch: "${{steps.extract_branch.outputs.branch}}"
        with:
          script: |
            # Define working variables
            $octopusURL = "${{ env.octopusUrl }}"
            $octopusAPIKey = "${{ secrets.OCTOPUS_API_KEY }}"
            $header = @{ "X-Octopus-ApiKey" = $octopusAPIKey }
            $spaceName = "${{ env.octopusSpace }}"
            $azureServicePrincipalName = "Azure Product Sandbox"
            $azureResourceGroupName = "${{ steps.create-resource-group.outputs.resourceGroup }}"
            $environmentNames = @("${{ steps.create-environment.outputs.environment }}")
            $roles = @("cattle-not-pets-web-server")
            $environmentIds = @()
            $azureWebAppName = "cattle-not-pets-web-${{ steps.create-environment.outputs.environment }}"

            # Get space
            $space = (Invoke-RestMethod -Method Get -Uri "$octopusURL/api/spaces/all" -Headers $header) | Where-Object {$_.Name -eq $spaceName}

            # Get Azure account
            $azureAccount = (Invoke-RestMethod -Method Get -Uri "$octopusURL/api/$($space.Id)/accounts/all" -Headers $header) | Where-Object {$_.Name -eq $azureServicePrincipalName}

            # Get Environments
            $environments = (Invoke-RestMethod -Method Get -Uri "$octopusURL/api/$($space.Id)/environments/all" -Headers $header) | Where-Object {$environmentNames -contains $_.Name}
            foreach ($environment in $environments)
            {
                $environmentIds += $environment.Id
            }

            # Build json payload
            $jsonPayload = @{
                Name = $azureWebAppName
                EndPoint = @{
                    CommunicationStyle = "AzureWebApp"
                    AccountId = $azureAccount.Id
                    ResourceGroupName = $azureResourceGroupName
                    WebAppName = $azureWebAppName
                }
                Roles = $roles
                EnvironmentIds = $environmentIds
            }

            # Register the target to Octopus Deploy
            Invoke-RestMethod -Method Post -Uri "$octopusURL/api/$($space.Id)/machines" -Headers $header -Body ($jsonPayload | ConvertTo-Json -Depth 10)


